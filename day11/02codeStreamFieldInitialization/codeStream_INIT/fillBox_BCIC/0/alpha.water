/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  6                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      alpha.water;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 0 0 0 0];

//internalField   uniform 0;

internalField   #codeStream
{
    codeInclude
    #{
        #include "fvCFD.H"
    #};

    codeOptions
    #{
        -I$(LIB_SRC)/finiteVolume/lnInclude \
        -I$(LIB_SRC)/meshTools/lnInclude
    #};

    //libs needed to visualize BC in paraview
    codeLibs
    #{
        -lmeshTools \
        -lfiniteVolume
    #};

    code
    #{
        const IOdictionary& d = static_cast<const IOdictionary&>(dict);
        const fvMesh& mesh = refCast<const fvMesh>(d.db());
        scalarField alpha(mesh.nCells(), 0.);

        forAll(alpha, i)
        {
            const scalar x = mesh.C()[i][0];
            const scalar y = mesh.C()[i][1];
            const scalar z = mesh.C()[i][2];

            if (y <= 0.2)
            {
                alpha[i] = 1.;
            }
        }

        writeEntry(os, "", alpha);
    #};
};

boundaryField
{
    leftWall
    {
        //type            zeroGradient;

   	type            codedFixedValue;
    	value           uniform 0;
    	redirectType    inletProfile1;

	code
    	#{
            const fvPatch& boundaryPatch = patch(); 
            const vectorField& Cf = boundaryPatch.Cf(); 
            scalarField& field = *this; 

            field = patchInternalField(); 	//take value from initialization

            scalar min = 0.5;  
            scalar max = 0.7; 

 	    forAll(Cf, faceI)
            {
      		//if (Cf[faceI].y() <= 0.1)
                if (
                   (Cf[faceI].z() > min) &&
                   (Cf[faceI].z() < max) &&
                   (Cf[faceI].y() > min) &&
                   (Cf[faceI].y() < max) 
                   )
            	{

		    if ( this->db().time().value() < 2.)
		    {
                        field[faceI] = 1.;
		    }
		    else
		    {
		        field[faceI] = 0.;
		    }

	    	    //field[faceI] = 1;
	        }
	    }
   	#};         

  	codeOptions
  	#{
       	    -I$(LIB_SRC)/finiteVolume/lnInclude \
       	    -I$(LIB_SRC)/meshTools/lnInclude
   	#};

  	codeInclude
   	#{
      	    #include "fvCFD.H"
      	    #include <cmath>
     	    #include <iostream>
	#};
    }

    rightWall
    {
        type            zeroGradient;
    }

    frontWall
    {
        type            zeroGradient;
    }

    backWall
    {
        type            zeroGradient;
    }

    bottomWall
    {
        type            zeroGradient;
    }

    top
    {
        type            inletOutlet;
        inletValue      uniform 0;
        value           uniform 0;
    }
}

// ************************************************************************* //
