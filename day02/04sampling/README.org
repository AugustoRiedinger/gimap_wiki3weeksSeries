#+TITLE: Sampling
#+AUTHOR: Augusto Riedinger.

* CONTENTS :toc:
- [[#about][ABOUT]]
- [[#objective][OBJECTIVE]]
- [[#simulation][SIMULATION]]
  - [[#pre-processing][Pre-processing]]
  - [[#running-the-simulation][Running the simulation]]
  - [[#post-processing][Post-processing]]

* ABOUT
This tutorial is an introduction to the OpenFOAMÂ® sampling utility. With this utility  one can extract sample data from certain selected surfaces or points in ones simulation  after or while running the simulation. If data is sampled while running one can use  sampling to observe the progress of the simulation and the correctness of the solution  without even reaching a write-interval.

Using a sample file in the system directory data can be sampled after the simulation or  by adding the needed functions to the controlDict it can be done while running a  simulation.

At the beginning of this tutorial the implementation for sampling using the sample  and the controlDict will be introduced and afterwards the different sampling options in OpenFOAM will be discussed.
* OBJECTIVE
Simulate the flow along a shock tube for 0.007 seconds and use OpenFOAM sampling utility for extracting the data along a line during the simulation and after the simulation.
* SIMULATION
** Pre-processing
*** Copying tutorial
:PROPERTIES:
:header-args: :tangle preproc
:END:

We will use the /shockTube/ tutorial. For that, we will copy it from OpenFOAM's Tutorials directory as our base case:

#+begin_src bash
cp -r $FOAM_TUTORIALS/compressible/rhoPimpleFoam/laminar/shockTube 00baseCase
#+end_src
*** System directory
:PROPERTIES:
:header-args: :tangle 00baseCase/system/sample
:END:

#+begin_src c++
FoamFile
{
format      ascii;
class       dictionary;
location    "system";
object      sample;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

type sets;
libs            ("libsampling.so");

interpolationScheme cellPoint;

setFormat       raw;

sets
(
data
{
    type    lineUniform;
    axis    x;
    start   (-4.995 0 0);
    end     (4.995 0 0);
    nPoints 1000;
}
);

fields          (T mag(U) p);
#+end_src

In the ~type~ the type of data to be sampled is defined, e.g. ~sets~ or ~surfaces~. The different options for ~interpolationScheme~ and ~setFormat~ will be discussed in a later section.

In the ~sets~ sub-dictionary each set of data should be given a name, which is freely chosen by the user, in this case the name is simply ~data~. In the bracket for the set of data, we need to specify the following criteria:

+ ~type~: specifies the method of sampling. Here uniform was chosen to make a sample on a line with equally distributed number of points.
+ ~axis~: to define how the point coordinates are written. In this case, x means that only the x coordinate for each point will be written.
+ ~Start/end~: the endpoints of the line-sample are defined.
+ ~nPoints~: number of points of our line.

Outside of the data and sets bracket in the fields we have to define which fields we want to sample.
*** controlDict
:PROPERTIES:
:header-args: :tangle 00baseCase/system/controlDict
:END:

To have the option to sample for each time step instead of each write-interval or sampling while the solver is running; instead of the ~sample~ dictionary additions in the ~controlDict~ are needed.

In this part one will change the ~controlDict~ of the ~shockTube~ tutorial so that our line-sampling from before will be executed while running, and per time step.

Add the following code to the end of the ~function~ sub-dictionary in the ~controlDict~.

#+begin_src c++
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     rhoPimpleFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         0.007;

deltaT          1e-05;

writeControl    runTime;

writeInterval   0.001;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

functions
{
    #includeFunc mag(U)

    linesample
    {
        type                sets;
        functionObjectLibs  ("libsampling.so");
        writeControl        timeStep;
        outputInterval      1;

        interpolationScheme cellPoint;

        setFormat   raw;

        sets
        (
            data
            {
                type    uniform;
                axis    x;
                start   (-4.995 0 0);
                end     (4.995 0 0);
                nPoints 1000;
            }
        );

        fields          (T mag(U) p);
    }
}
#+end_src

~linesample~ sub-dictionary includes the settings for the sampling tool. Any arbitrary name can be chosen instead of ~linesample~. The chosen name will be the name of the folder in the postProcessing directory after running the solver.

Inside our linesample sub-dictionary:
 + ~type~: ~sets~ or ~surfaces~ can be chosen.
 + ~functionObjectLibs~: provides operations needed for the sampling tasks.
 + ~writeControl~: specifies the intervals in which sampling data should be collected in the case of ~timeStep~, depending on the ~outputInterval~, sampling data will get saved in dependence of the ~timeStep~. In the case of ~outputInterval~ being equal to 1, every time step sampling data will be saved. Changing the interval to 2 means that the data will be saved every 2 time steps.

** Running the simulation
:PROPERTIES:
:header-args: :tangle 00baseCase/run
:END:

Run the tutorial with the following commands:

#+begin_src bash
blockMesh | tee log.blockMesh
setFields | tee log.setFields
touch open.foam
rhoPimpleFoam | tee log.rhoPimpleFoam
#+end_src
** Post-processing
After ~rhoPimpleFoam~ solver finishes running, based on your sampling approach the following steps should be performed.

*** sample directory
:PROPERTIES:
:header-args: :tangle 00baseCase/postproc
:END:

Use the ~sample~ command to extract your sample-data.

#+begin_src bash
postProcess -func sample
#+end_src

A new folder will appear in your case directory named =postProcessing= and in it a folder named =sample=. In this folder all the sampling data will be stored in separate folders for each write-interval.
*** controlDict
The =postProcessing= directory and all its subdirectories have been generated after the first time step. Now it can be seen that for every time step a folder is generated instead of only every write interval.
